/*
https://leetcode.com/problems/single-element-in-a-sorted-array/
You are given a sorted array consisting of only integers where every element appears exactly twice, 
except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
*/
class Solution {
public:
    int find(vector<int>& nums, int low, int high){
        if(high == low)
            return nums[low];
        int mid = (low + high)/2;
        int val = (high-mid-1);
        int val1= (mid-low-1);
        if(nums[mid] != nums[mid-1] and nums[mid] != nums[mid+1])
            return nums[mid];
        if(nums[mid] == nums[mid+1] and val % 2){
            return find(nums, low+2,high);
        }
        else if(nums[mid] == nums[mid+1]){
            return find(nums,low,mid-1);
        }
        else if(nums[mid] == nums[mid-1] and val1 % 2)
            return find(nums,low, mid - 2);
        return find(nums, mid+1, high);
    }
    int singleNonDuplicate(vector<int>& nums) {
        return find(nums, 0, nums.size() - 1);
    }
};
